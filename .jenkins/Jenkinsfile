pipeline {
    agent { label 'sds-builder-v8' }

    environment {
        ORG = 'sds'
        ECR_URL = 'hub.tess.io'
        ARTIFACTORY_PASS = credentials('ARTIFACTORY_PASS')
        CONAN_USER = 'oss'
        TARGET_BRANCH = 'master'
        STABLE_BRANCH = 'stable/v*'
    }

    parameters {
        string(defaultValue: "", description: 'UpstreamTriggered', name: 'upstream_triggered')
    }

    stages {
        stage('Adjust Tag for Master/PR') {
            when { not {
                branch "${STABLE_BRANCH}"
            } }
            steps {
                script {
                    BUILD_MISSING = "--build missing"
                }
            }
        }
        stage('Adjust for Testing/Stable') {
            when {
                branch "${STABLE_BRANCH}"
            }
            steps {
                script {
                    BUILD_MISSING = ""
                }
            }
        }

        stage('Get Version') {
            steps {
                script {
                    PROJECT = sh(script: "grep -m 1 'name =' conanfile.py | awk '{print \$3}' | tr -d '\n' | tr -d '\"'", returnStdout: true)
                    VER = sh(script: "grep -m 1 ' version =' conanfile.py | awk '{print \$3}' | tr -d '\n' | tr -d '\"'", returnStdout: true)
                    CONAN_CHANNEL = sh(script: "echo ${BRANCH_NAME} | sed -E 's,(\\w+-?\\d*)/.*,\\1,' | sed -E 's,-,_,' | tr -d '\n'", returnStdout: true)
                    ECR_PATH = "${ECR_URL}/${ORG}/${PROJECT}"
                    TAG = "${VER}@${CONAN_USER}/${CONAN_CHANNEL}"
                    CONAN_FLAGS="--name ${PROJECT} --user ${CONAN_USER} --channel ${CONAN_CHANNEL}"
                    slackSend color: '#0063D1', channel: '#sds-ci', message: "*${PROJECT}/${TAG}* is building: ${BUILD_URL}"
                    env.pkg_version = "${PROJECT}/${TAG}"
                }
            }
        }

        stage('Tag Stable Build') {
            when { branch "${STABLE_BRANCH}" }
            steps {
                script {
                    TAG = "${VER}@"
                }
            }
        }

        stage("Compile") {
            steps {
                 sh "hostname ; \
                    echo $NODE_NAME ; \
                    conan create ${BUILD_MISSING} -s:h build_type=Debug -o ${PROJECT}/*:sanitize=True ${CONAN_FLAGS} . ; \
                    conan create ${BUILD_MISSING} -s:h build_type=Debug ${CONAN_FLAGS} . ; \
                    conan create ${BUILD_MISSING} -s:h build_type=RelWithDebInfo -o sisl/*:malloc_impl=tcmalloc ${CONAN_FLAGS} . ; \
                    conan create ${BUILD_MISSING} -s:h build_type=RelWithDebInfo -o sisl/*:prerelease=True -o sisl/*:malloc_impl=tcmalloc ${CONAN_FLAGS} . ; \
                    "
            }
             post {
                       failure { script { sleep 3600000  } }
                   }
        }

        stage("Deploy") {
            when {
                expression { !(env.BRANCH_NAME =~ /PR-/) }
            }
            steps {
                sh "conan remote login -p ${ARTIFACTORY_PASS} ebay-local _service_sds"
                sh "conan graph info ./ | grep 'ref: ' | awk '{print \$2}'  | sort | uniq | grep -v ${PROJECT} | grep -v '#' | while read pkg; do conan upload -r ebay-local -c \"\${pkg}\"; done"
                sh "conan upload ${PROJECT}/${TAG} -c -r ebay-local"
            }
        }
        stage("Downstream Build") {
            when { allOf {
               expression { (env.BRANCH_NAME == "${TARGET_BRANCH}") }
               expression { (!"${upstream_triggered}") || ("${upstream_triggered}" == "") }
            } }
        
            stages {
                stage('HomeObject') {
                    steps {
                        script {
                            def hobj_res = build job: "HomeObject/main", parameters: [[$class: 'StringParameterValue', name: 'upstream_triggered', value: 'true']], propagate: true
                        }
                    }
                }
            }
        }
    }

    post {
        failure {
            script {
                    slackSend color: '#E43237', channel: '#homestore-build', message: "@here HomeStore build *${PROJECT}/${TAG}* has had a failure : ${BUILD_URL}"
            }
        }
        success {
            slackSend color: '#85B717', channel: '#sds-ci', message: "*${PROJECT}/${TAG}* has completed successfully."
        }
    }
}
